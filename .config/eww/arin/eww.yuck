;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; **

;; ** Variables ***********************************************************************

;; Workspace vars
(defpoll WMS :interval "1s" `wmctrl -d | grep '*' | cut -d ' ' -f13`)

;; Time vars
(defpoll TIME :interval "5s" `date +\"%I:%M %p\"`)
(defpoll DATE :interval "5s" `date +\"%A, %B %d\"`)

;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)

;; Mail vars
(defpoll MAILS :interval "5m" `scripts/mails`)

;; Battery vars
(defpoll BATICON :interval "1m" `scripts/battery --icon`)
(defpoll BATPERC :interval "1m" `scripts/battery --perc`)

;; Volume vars
(defpoll VOLICON :interval "1s" `scripts/volume --icon`)
(defpoll VOLUME :interval "1s" `scripts/volume --get`)

;; Network
(defpoll WIFIICON :interval "10s" `scripts/check-network --icon`)
(defpoll NETSTAT :interval "10s" `scripts/check-network --stat`)

;; User
(defvar IMAGE "images/profile.jpg")
(defpoll USER :interval "10m" `whoami`)


;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `./scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `./scripts/sys_info --mem`)
(defpoll DISK_USAGE :interval "1s" `./scripts/sys_info --disk`)
(defpoll BLIGHT :interval "1s" `./scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `./scripts/sys_info --bat`)
(defpoll QUOTE :interval "5m" `./scripts/quotes`)


;; ** Widgets *************************************************************************

;; search
(defwidget search [] 
		(box :class ""
			(box :orientation "h" :spacing 30 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				)))












;; apps
(defwidget apps [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 0 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"			    
		    	(box :class "deb-o" :orientation "h" :spacing 0 :space-evenly "true"
            (box :orientation "h" :spacing 0 :class "deb-contain"	
				(button :style "background-image: url('images/icons/debian.svg');" :class "debian" :onclick "scripts/widget_search --menu")))
		    	(box :orientation "h" :spacing 0 :class "search-contain"	
            (button :style "background-image: url('images/icons/search.svg');" :class "genicon" :onclick "scripts/widget_search --menu"))
            (box :orientation "h" :spacing 0 :class "power-contain"	
            (button :style "background-image: url('images/icons/power.svg');" :class "genicon" :onclick "scripts/widget_search --menu"))


           
			
            
            
            


                   


               
            	(box :class "res_box" :orientation "h" :spacing 0 :space-evenly "true"
					(label :class "res_text" :valign "end" :halign "center" :text "󰀘")
               (label :class "res_text" :valign "end" :halign "center" :text "󰀘")
               (label :class "res_text" :valign "end" :halign "center" :text "󰀘")
              )
             


			(box :orientation "h" :spacing 1 :class "apps-box"
				(button :style "background-image: url('images/icons/apps/terminal.svg');" :class "appicon" :onclick "scripts/widget_apps --tr")
				(button :style "background-image: url('images/icons/apps/firefox.svg');" :class "appicon" :onclick "scripts/widget_apps --ff")
				(button :style "background-image: url('images/icons/apps/files.svg');" :class "appicon" :onclick "scripts/widget_apps --fm") )
            
            
            (box :orientation "h" :spacing 0 :class "noti"
            ;(box :orientation "h" :spacing 0 :class "bat"
				(button :onclick "scripts/widget_apps --pow" :class ""
					(box :orientation "h" :spacing 0 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${BATICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text BATPERC)))
            (button :onclick "scripts/volume --toggle" :class ""
					(box :orientation "h" :spacing 0 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${VOLICON}');" :class "trayicon")))
				(button :onclick "scripts/widget_apps --nm"  :class ""
					(box :orientation "h" :spacing 0 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${WIFIICON}');" :class "trayicon"))))
            
            (box :class "sob" :orientation "h" :spacing 0 :space-evenly "true"
            
            (box :class "stats_box" :orientation "h" :valign "center"  :spacing 0 
					(label :class "stats_text" :valign "end" :halign "center" :text "${MEM_USAGE}% |"))
				(box :class "stats_box" :orientation "h" :valign "center"  :spacing 0 
					(label :class "stats_text"  :halign "center" :text "${DISK_USAGE}% |"))
				(box :class "stats_box" :orientation "h" :valign "center"  :spacing 0 
					(label :class "stats_text"   :text "${CPU_USAGE}%"))))))

;; weather
(defwidget weather [] 
		(box :class "dockbox"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "time" :halign "start" :wrap "true" :limit-width 25 :text TIME)
				(label :class "date" :halign "start" :wrap "true" :limit-width 25 :text DATE))
			(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "weathericon" :style "color: ${HEX};" :text ICON)
				(label :class "weathertemp" :text TEMP))))

;; music
(defwidget music [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
				(box :class "musicbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
					(label :class "song" :halign "start" :wrap "false" :limit-width 20 :text SONG)
					(label :class "artist" :halign "start" :wrap "false" :limit-width 20 :text ARTIST)))
			(box :class "musicbuttons" :orientation "h" :spacing 10 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('images/icons/music/previous-button.png');" :class "trackbutton" :onclick "scripts/music_info --prev")
				(button :style "background-image: url('${STATUS}');" :class "playbutton" :onclick "scripts/music_info --toggle")
				(button :style "background-image: url('images/icons/music/next-button.png');" :class "trackbutton" :onclick "scripts/music_info --next"))))

;; system
(defwidget system [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 5 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false")))

;; ** Windows *************************************************************************

;; search
(defwindow search
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "20px"
                               :width "180px"
                               :height "60px"
                               :anchor "bottom left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(search))

;; apps
(defwindow apps
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "400px"
                               :height "45px"
                               :anchor "bottom center")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "bottom")
           :windowtype "dock"
           :wm-ignore false
(apps))

;; weather
(defwindow weather
           :monitor 0
           :geometry (geometry :x "760px"
                               :y "10px"
                               :width "200px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(weather))

;; music
(defwindow music
           :monitor 0
           :geometry (geometry :x "990px"
                               :y "20px"
                               :width "400px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(music))

;; system
(defwindow system
           :monitor 0
           :geometry (geometry :x "720px"
                               :y "20px"
                               :width "480px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(system))